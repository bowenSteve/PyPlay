{"ast":null,"code":"var _jsxFileName = \"/home/bowen/Desktop/WEB-APPLICATIONS/PyPlay/client/src/components/Session.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Session({\n  questions\n}) {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(20);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [score, setScore] = useState(0); // State to track user's score\n  const [quizComplete, setQuizComplete] = useState(false); // State to check if quiz is complete\n\n  // Effect to handle countdown timer\n  useEffect(() => {\n    if (timeLeft === 0) {\n      // Automatically move to the next question when time is up\n      handleNextQuestion();\n    }\n    const timer = setInterval(() => {\n      setTimeLeft(prevTime => prevTime > 0 ? prevTime - 1 : 0);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [timeLeft]);\n\n  // Function to handle moving to the next question\n  const handleNextQuestion = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Check if the selected option is correct\n    if (selectedOption) {\n      const selected = currentQuestion.options.find(option => option.id === selectedOption);\n      if (selected && selected.is_correct) {\n        setScore(prevScore => prevScore + 1); // Increment score if the answer is correct\n      }\n    }\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setTimeLeft(20); // Reset timer to 20 seconds for the next question\n      setSelectedOption(null); // Reset selected option for the new question\n    } else {\n      // Quiz is complete, calculate final score percentage\n      setQuizComplete(true);\n    }\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n\n  // Calculate score percentage if the quiz is complete\n  const scorePercentage = quizComplete ? score / questions.length * 100 : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-3 position-relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Quiz Questions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-absolute top-0 end-0 p-3\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Time Left: \", timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), !quizComplete ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Question \", currentQuestionIndex + 1, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), \" \", currentQuestion.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, currentQuestion.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            id: `option-${option.id}`,\n            name: \"quizOptions\",\n            value: option.id,\n            className: \"form-check-input\",\n            checked: selectedOption === option.id,\n            onChange: () => setSelectedOption(option.id) // Set selected option\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `option-${option.id}`,\n            className: \"form-check-label\",\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this)]\n        }, option.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-end\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleNextQuestion,\n          disabled: selectedOption === null // Disable button if no option is selected\n          ,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Display the score after the quiz is complete\n    _jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Your Score: \", score, \" out of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Percentage: \", scorePercentage.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(Session, \"IqevIvyqh7yjE4R8HQi1FZsF1Ho=\");\n_c = Session;\nexport default Session;\nvar _c;\n$RefreshReg$(_c, \"Session\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Session","questions","_s","currentQuestionIndex","setCurrentQuestionIndex","timeLeft","setTimeLeft","selectedOption","setSelectedOption","score","setScore","quizComplete","setQuizComplete","handleNextQuestion","timer","setInterval","prevTime","clearInterval","currentQuestion","selected","options","find","option","id","is_correct","prevScore","length","prevIndex","scorePercentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","map","type","name","value","checked","onChange","htmlFor","onClick","disabled","toFixed","_c","$RefreshReg$"],"sources":["/home/bowen/Desktop/WEB-APPLICATIONS/PyPlay/client/src/components/Session.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction Session({ questions }) {\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(20);\n    const [selectedOption, setSelectedOption] = useState(null);\n    const [score, setScore] = useState(0);  // State to track user's score\n    const [quizComplete, setQuizComplete] = useState(false); // State to check if quiz is complete\n\n    // Effect to handle countdown timer\n    useEffect(() => {\n        if (timeLeft === 0) {\n            // Automatically move to the next question when time is up\n            handleNextQuestion();\n        }\n\n        const timer = setInterval(() => {\n            setTimeLeft((prevTime) => (prevTime > 0 ? prevTime - 1 : 0));\n        }, 1000);\n\n        return () => clearInterval(timer);\n    }, [timeLeft]);\n\n    // Function to handle moving to the next question\n    const handleNextQuestion = () => {\n        const currentQuestion = questions[currentQuestionIndex];\n\n        // Check if the selected option is correct\n        if (selectedOption) {\n            const selected = currentQuestion.options.find(option => option.id === selectedOption);\n            if (selected && selected.is_correct) {\n                setScore(prevScore => prevScore + 1); // Increment score if the answer is correct\n            }\n        }\n\n        if (currentQuestionIndex < questions.length - 1) {\n            setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\n            setTimeLeft(20); // Reset timer to 20 seconds for the next question\n            setSelectedOption(null); // Reset selected option for the new question\n        } else {\n            // Quiz is complete, calculate final score percentage\n            setQuizComplete(true);\n        }\n    };\n\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Calculate score percentage if the quiz is complete\n    const scorePercentage = quizComplete ? (score / questions.length) * 100 : null;\n\n    return (\n        <div className=\"container mt-3 position-relative\">\n            <h3>Quiz Questions:</h3>\n\n            {/* Countdown timer at the top right */}\n            <div className=\"position-absolute top-0 end-0 p-3\">\n                <h5>Time Left: {timeLeft}s</h5>\n            </div>\n\n            {!quizComplete ? (\n                <>\n                    {/* Display the current question */}\n                    <div key={currentQuestion.id} className=\"mb-3\">\n                        <p>\n                            <strong>Question {currentQuestionIndex + 1}:</strong> {currentQuestion.text}\n                        </p>\n                    </div>\n\n                    {/* Display the options */}\n                    <div className=\"mb-3\">\n                        {currentQuestion.options.map((option) => (\n                            <div key={option.id} className=\"form-check\">\n                                <input\n                                    type=\"radio\"\n                                    id={`option-${option.id}`}\n                                    name=\"quizOptions\"\n                                    value={option.id}\n                                    className=\"form-check-input\"\n                                    checked={selectedOption === option.id}\n                                    onChange={() => setSelectedOption(option.id)} // Set selected option\n                                />\n                                <label htmlFor={`option-${option.id}`} className=\"form-check-label\">\n                                    {option.text}\n                                </label>\n                            </div>\n                        ))}\n                    </div>\n\n                    {/* Next button at the bottom right */}\n                    <div className=\"d-flex justify-content-end\">\n                        <button\n                            className=\"btn btn-primary\"\n                            onClick={handleNextQuestion}\n                            disabled={selectedOption === null} // Disable button if no option is selected\n                        >\n                            Next\n                        </button>\n                    </div>\n                </>\n            ) : (\n                // Display the score after the quiz is complete\n                <div className=\"mb-3\">\n                    <h5>Your Score: {score} out of {questions.length}</h5>\n                    <h5>Percentage: {scorePercentage.toFixed(2)}%</h5>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Session;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}